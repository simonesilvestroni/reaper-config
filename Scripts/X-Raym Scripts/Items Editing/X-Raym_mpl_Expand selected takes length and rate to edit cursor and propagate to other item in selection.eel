/**
 * ReaScript Name: Expand selected takes length and rate to edit cursor and propagate to other item in selection
 * Description: A way to expand items in selection without moving their synch point, determined by snap offset and content at snap offset. Rate is calculated from snap offset of item under mouse and edit cursor distance.
 * Instructions: Place edit cursor. mouse over an item. Run with keyboard shortcut. If item under mouse has snap = 0, then it put item pos at edit cursor, and put all other item with snap = 0 to edit cursor, with the same rate transformation
 * Author: X-Raym
 * Author URI: http://extremraym.com
 * Repository: GitHub > X-Raym > EEL Scripts for Cockos REAPER
 * Repository URI: https://github.com/X-Raym/REAPER-EEL-Scripts
 * File URI: https://github.com/X-Raym/REAPER-EEL-Scripts/scriptName.eel
 * Licence: GPL v3
 * Forum Thread: Scripts (EEL): Randomize Take Playback Rate
 * Forum Thread URI: http://forum.cockos.com/showthread.php?p=1520462
 * REAPER: 5 pre 28
 * Extensions: SWS 2.6.4 #0
 * Version: 1.0
*/
 
/**
 * Changelog:
 * v1.0 (2015-29-05)
  + Initial Release
 */

/*
 * Many thanks to mpl for this help on this script ! He made this possible :D Thanks man!
 * http://forum.cockos.com/member.php?u=70694
 */ 

 // ----- DEBUGGING ====>
/*@import ../Functions/X-Raym_Functions - console debug messages.eel

debug = 1; // 0 => No console. 1 => Display console messages for debugging.
clean = 1; // 0 => No console cleaning before every script execution. 1 => Console cleaning before every script execution.

msg_clean();
msg_start();*/
// <==== DEBUGGING ----

function main() local(i, mouse_item, mouse_take, item, take)
(
	// GET MOUSE ITEM AND MOUSE TAKE
    (mouse_item = extension_api("BR_ItemAtMouseCursor", mouse_pos)) ? (
		
		// CHECK IF ITEM HAS TAKE OR IF IT IS EMPTY ITEM
		(mouse_take = GetActiveTake(mouse_item)) ?(
			take_rate = GetMediaItemTakeInfo_Value(mouse_take, "D_PLAYRATE");
		):(
			take_rate = 1;
		);
			
		// GET CURSOR POS
		cursor_pos = GetCursorPositionEx(0);

		// INITIAL ITEM INFOS
		item_fadein = GetMediaItemInfo_Value(mouse_item, "D_FADEINLEN");
		item_fadeout = GetMediaItemInfo_Value(mouse_item, "D_FADEOUTLEN");
		item_position = GetMediaItemInfo_Value(mouse_item, "D_POSITION");
		item_length = GetMediaItemInfo_Value(mouse_item, "D_LENGTH");
		item_snap = GetMediaItemInfo_Value(mouse_item, "D_SNAPOFFSET");
		
		// SNAP
		item_snap_absolute = item_snap + item_position;
		inv_snap_offset = item_length - item_snap;
		
		abs_beetween = abs(item_snap_absolute - cursor_pos);
		
		cursor_pos < item_snap_absolute ? (
			item_snap == 0 ? (
				new_length = (item_position - cursor_pos) + item_length;
				k = new_length / item_length;
				mouse_item_snap = 1; // bolean
			):(
				k = abs_beetween / item_snap;
				new_length = item_length * k;
			);
			new_pos = cursor_pos;
		);

		cursor_pos > item_snap_absolute ? (
			k = abs_beetween / inv_snap_offset;
			new_length = item_length * k;
			new_pos = cursor_pos - new_length;
		);
		
		new_rate = take_rate / k;
		new_snap_offset = item_snap * k;
		new_fadein = item_fadein * k;
		new_fadeout = item_fadeout * k;
		
		SetMediaItemTakeInfo_Value(mouse_take, "D_PLAYRATE", new_rate);
		SetMediaItemInfo_Value(mouse_item, "D_POSITION", new_pos);
		SetMediaItemInfo_Value(mouse_item, "D_LENGTH", new_length);
		SetMediaItemInfo_Value(mouse_item, "D_SNAPOFFSET", new_snap_offset);
		SetMediaItemInfo_Value(mouse_item, "D_FADEINLEN", new_fadein);
		SetMediaItemInfo_Value(mouse_item, "D_FADEOUTLEN", new_fadeout); 		
		

			
		// PROPAGATE TRANSFORMATION
		
		// IF MOUSE ITEM ISE SELCTED, THEN UNSELECT
		IsMediaItemSelected(mouse_item) ?(
			selected = 1;
			SetMediaItemSelected(mouse_item, 0);
		);
		
		i = 0;
		loop(CountSelectedMediaItems(0),
			
			item = GetSelectedMediaItem(0,i);
			// CHECK IF ITEM HAS TAKE OR IF IT IS EMPTY ITEM
			(take = GetActiveTake(item)) ?(
				take_rate = GetMediaItemTakeInfo_Value(take, "D_PLAYRATE");
			):(
				take_rate = 1;
			);

			// INITIAL ITEM INFOS
			item_fadein = GetMediaItemInfo_Value(item, "D_FADEINLEN");
			item_fadeout = GetMediaItemInfo_Value(item, "D_FADEOUTLEN");
			item_position = GetMediaItemInfo_Value(item, "D_POSITION");
			item_length = GetMediaItemInfo_Value(item, "D_LENGTH");
			item_snap = GetMediaItemInfo_Value(item, "D_SNAPOFFSET");
			
			// SNAP
			item_snap_absolute = item_snap + item_position;

			new_length = item_length * k;
			
			new_rate = take_rate / k;
			new_snap_offset = item_snap * k;
			new_fadein = item_fadein * k;
			new_fadeout = item_fadeout * k;
			
			new_pos = item_snap_absolute - new_snap_offset;
			
			mouse_item_snap == 1 ? (
				new_pos = item_position - abs_beetween;
			);
			
			mouse_item_snap == 1 && item_snap == 0 ? (
				new_pos = item_position;
			);
			
			SetMediaItemTakeInfo_Value(take, "D_PLAYRATE", new_rate);
			SetMediaItemInfo_Value(item, "D_POSITION", new_pos);
			SetMediaItemInfo_Value(item, "D_LENGTH", new_length);
			SetMediaItemInfo_Value(item, "D_SNAPOFFSET", new_snap_offset);
			SetMediaItemInfo_Value(item, "D_FADEINLEN", new_fadein);
			SetMediaItemInfo_Value(item, "D_FADEOUTLEN", new_fadeout);
			
			i += 1;
		
		);
		
		selected == 1 ? (
			SetMediaItemSelected(mouse_item, 1);
		);
		

		UpdateArrange(); // refresh arrange view
		Undo_OnStateChange("Expand selected takes length and rate to edit cursor and propagate to other item in selection");
	
	); // ENDIF ITEM UNDER MOUSE

);

PreventUIRefresh(1);
main();
PreventUIRefresh(-1);
