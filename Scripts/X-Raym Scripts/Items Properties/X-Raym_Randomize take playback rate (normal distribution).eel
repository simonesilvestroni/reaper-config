/**
 * ReaScript Name: Randomize take playback rate (normal distribution)
 * Description: Randomize take playback rate from snap offset, with fade length ratio preservation. Customization of the randomization have to be edited int he script itself.
 * Instructions: Here is how to use it. (optional)
 * Author: X-Raym
 * Author URI: http://extremraym.com
 * Repository: GitHub > X-Raym > EEL Scripts for Cockos REAPER
 * Repository URI: https://github.com/X-Raym/REAPER-EEL-Scripts
 * File URI: https://github.com/X-Raym/REAPER-EEL-Scripts/scriptName.eel
 * Licence: GPL v3
 * Forum Thread: Scripts (EEL): Randomize Take Playback Rate
 * Forum Thread URI: http://forum.cockos.com/showthread.php?p=1520462
 * REAPER: 4.76
 * Extensions: None
 * Version: 1.1
*/
 
/**
 * Changelog:
 * v1.1 (2015-05-12)
  + Randomize from snap offset position
  + Support for fades
 * v1.0 (27-11-2014)
  + Initial Release
 */

// Based on spk77 initial code snippet in REAPER Forum Thread : 
// Takes Random Action - Pan and More > #23
// and EEL: Pan active takes randomly (in selected items) > #09

// Normal distribution approximation : Generating Normal (Gaussian) Distributed Random Number
// Normal distribution approximation URI : http://www.protonfish.com/random.shtml

// User Edit Area ////////////////////////////////////////////////////////////////
mean = 1; // range = 0 to 10
standard_dev = 0.2; // try values in range 0.01 to 0.5, for example
/////////////////////////////////////////////////////////////////////////////////

/*
function msg_f(f)
(
  sprintf(str, "%f", f);
  ShowConsoleMsg(str);
  ShowConsoleMsg("\n");
);
*/

function rand_take_pb_rate(mean, standard_dev) local(i, item, take, c)
(
  // Constrain user input
  mean < 0 ? mean = 0;
  mean > 10 ? mean = 10;
  standard_dev < 0 ? standard_dev = 0;
  standard_dev > 10 ? standard_dev = 10;
//ShowConsoleMsg("");
  i = 0;
  loop(CountSelectedMediaItems(0), 
    (item = GetSelectedMediaItem(0, i)) ? (
      (take = GetActiveTake(item)) ? (
        R = 0;
        G = rand(2) - 1 + rand(2) - 1 + rand(2) - 1;
        R = G * standard_dev + mean;
        
        // Constrain result
        R < 0 ? R += abs(R + 1);
        R > 10 ? R -= (R - 1);
        
        // INITIAL ITEM INFOS
        init_fadein = GetMediaItemInfo_Value(item, "D_FADEINLEN");
        init_fadeout = GetMediaItemInfo_Value(item, "D_FADEOUTLEN");
        init_rate = GetMediaItemTakeInfo_Value(take, "D_PLAYRATE");
        init_position = GetMediaItemInfo_Value(item, "D_POSITION");
        init_length = GetMediaItemInfo_Value(item, "D_LENGTH");
        init_snap = GetMediaItemInfo_Value(item, "D_SNAPOFFSET");

        // USE SOURCE AS REFRENCE
        src_snap = init_snap * init_rate;
        src_fadein = init_fadein * init_rate;
        src_fadeout = init_fadeout * init_rate;
        src_length = init_length * init_rate;

        // SET VALUES
        SetMediaItemTakeInfo_Value(take, "D_PLAYRATE", R);

        new_snap = src_snap / R;
        SetMediaItemInfo_Value(item, "D_SNAPOFFSET", new_snap);
        
        snap_dif = init_snap - new_snap;
        SetMediaItemInfo_Value(item, "D_POSITION", init_position + snap_dif);
        
        SetMediaItemInfo_Value(item, "D_LENGTH", src_length / R);
        
        init_fadein > 0 ? (
          SetMediaItemInfo_Value(item, "D_FADEINLEN", src_fadein / R);
        );

        init_fadein > 0 ? (
          SetMediaItemInfo_Value(item, "D_FADEOUTLEN", src_fadeout / R);
        );
      );
    );
    i += 1;
  );
  UpdateArrange(); // refresh arrange view
  Undo_OnStateChange("Randomize take playback rate (normal distribution)");
);

PreventUIRefresh(1);
rand_take_pb_rate(mean, standard_dev);
PreventUIRefresh(-1);
